generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  student         Student?
  faculty         Faculty?
  hod             Hod?
  admin           Admin?
  Freeze          Freeze[]
  username        String?
  displayUsername String?
  frozenAsFaculty Freeze[]  @relation("FrozenByFaculty")
  frozenAsHod     Freeze[]  @relation("FrozenByHod")
  frozenAsAdmin   Freeze[]  @relation("FrozenByAdmin")

  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  role       String?
  Semester   Semester[]
  Department Department[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Semester {
  id        String       @id @default(uuid())
  type      SemesterType
  year      String
  name      String?
  startDate DateTime
  endDate   DateTime
  isCurrent Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  createdBy User         @relation(fields: [userId], references: [id])
  userId    String

  @@unique([type, year])
}

enum SemesterType {
  even
  odd
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum Role {
  STUDENT
  FACULTY
  HOD
  ADMIN
}

enum CondonationStatus {
  NOT_REQUESTED
  PENDING
  APPROVED
  REJECTED
}

enum EligibilityStatus {
  ELIGIBLE
  NOT_ELIGIBLE
}

enum AssignmentType {
  THEORY
  LAB
}

model Department {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  name      String    @unique
  hodId     String?   @unique
  hod       Hod?      @relation(fields: [hodId], references: [id])
  sections  Section[]
  students  Student[]
  faculties Faculty[]
  Course    Course[]

  @@index([name])
}

model Hod {
  id             String      @id @default(uuid())
  user           User        @relation(fields: [userId], references: [id])
  userId         String      @unique
  department     Department?
  departmentName String?     @unique
}

model Section {
  id              String             @id @default(uuid())
  name            String
  department      Department         @relation(fields: [departmentName], references: [name])
  departmentName  String
  semester        Int
  courses         CourseAssignment[]
  studentSections StudentSection[]
  batches         Batch[]

  @@unique([name, departmentName, semester])
  @@index([departmentName, semester])
}

/**
 * TODO Change the Name of this model to support L-T-P
 */
model Batch {
  id               String             @id @default(uuid())
  name             String
  section          Section            @relation(fields: [sectionId], references: [id])
  sectionId        String
  students         Student[]          @relation("BatchStudents")
  CourseAssignment CourseAssignment[]

  @@unique([name, sectionId])
}

model StudentSection {
  id           String  @id @default(uuid())
  student      Student @relation(fields: [studentId], references: [id])
  studentId    String
  section      Section @relation(fields: [sectionId], references: [id])
  sectionId    String
  semester     Int
  academicYear String

  @@unique([studentId, sectionId, semester, academicYear])
  @@index([studentId])
  @@index([sectionId])
}

model Student {
  id              String               @id @default(uuid())
  user            User                 @relation(fields: [userId], references: [id])
  userId          String               @unique
  usn             String               @unique
  department      Department           @relation(fields: [departmentName], references: [name])
  departmentName  String
  currentSemester Int
  studentSections StudentSection[]
  academicYear    String
  registrations   CourseRegistration[]
  marks           Mark[]
  attendances     Attendance[]
  batches         Batch[]              @relation("BatchStudents")

  @@index([departmentName])
}

model Faculty {
  id             String             @id @default(uuid())
  user           User               @relation(fields: [userId], references: [id])
  userId         String             @unique
  department     Department         @relation(fields: [departmentName], references: [name])
  departmentName String
  teaches        CourseAssignment[]

  @@index([departmentName])
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Course {
  id             String               @id @default(uuid())
  code           String               @unique
  name           String
  type           String
  credits        Int
  department     Department           @relation(fields: [departmentName], references: [name])
  departmentName String
  hasLab         Boolean              @default(false)
  assignments    CourseAssignment[]
  registrations  CourseRegistration[]
  marks          Mark[]
  attendances    Attendance[]

  @@index([code])
}

model CourseAssignment {
  id             String         @id @default(uuid())
  course         Course         @relation(fields: [courseId], references: [id])
  courseId       String
  faculty        Faculty        @relation(fields: [facultyId], references: [id])
  facultyId      String
  section        Section        @relation(fields: [sectionId], references: [id])
  sectionId      String
  batch          Batch?         @relation(fields: [batchId], references: [id])
  batchId        String?
  assignmentType AssignmentType
  semester       Int
  academicYear   String
  freezes        Freeze[]

  @@unique([courseId, facultyId, sectionId, batchId, assignmentType, semester, academicYear])
  @@index([sectionId, semester])
  @@index([batchId])
}

model CourseRegistration {
  id           String  @id @default(uuid())
  student      Student @relation(fields: [studentId], references: [id])
  studentId    String
  course       Course  @relation(fields: [courseId], references: [id])
  courseId     String
  semester     Int
  academicYear String
  hasDropped   Boolean @default(false)

  @@unique([studentId, courseId, semester, academicYear])
  @@index([studentId])
  @@index([courseId])
}

model Attendance {
  id                String            @id @default(uuid())
  student           Student           @relation(fields: [studentId], references: [id])
  studentId         String
  course            Course            @relation(fields: [courseId], references: [id])
  courseId          String
  total             Int
  present           Int
  absent            Int
  condonationStatus CondonationStatus @default(NOT_REQUESTED)
  percentage        Float

  @@unique([studentId, courseId])
  @@index([courseId])
}

model Mark {
  id        String            @id @default(uuid())
  student   Student           @relation(fields: [studentId], references: [id])
  studentId String
  course    Course            @relation(fields: [courseId], references: [id])
  courseId  String
  cie1      Float?
  cie2      Float?
  cie3      Float?
  aat1      Float?
  aat2      Float?
  lab1      Float?
  lab2      Float?
  labTotal  Float?
  cieTotal  Float?
  status    EligibilityStatus

  @@unique([studentId, courseId])
  @@index([courseId])
}

model Freeze {
  id                 String           @id @default(uuid())
  courseAssignment   CourseAssignment @relation(fields: [courseAssignmentId], references: [id])
  courseAssignmentId String           @unique
  cie1Frozen         Boolean          @default(false)
  cie2Frozen         Boolean          @default(false)
  cie3Frozen         Boolean          @default(false)
  cie1Deadline       DateTime?
  cie2Deadline       DateTime?
  cie3Deadline       DateTime?
  facultyFrozen      Boolean          @default(false)
  hodFrozen          Boolean          @default(false)
  adminFrozen        Boolean          @default(false)
  facultyFrozenAt    DateTime?
  hodFrozenAt        DateTime?
  adminFrozenAt      DateTime?
  frozenByFaculty    User?            @relation("FrozenByFaculty", fields: [frozenByFacultyId], references: [id])
  frozenByFacultyId  String?
  frozenByHod        User?            @relation("FrozenByHod", fields: [frozenByHodId], references: [id])
  frozenByHodId      String?
  frozenByAdmin      User?            @relation("FrozenByAdmin", fields: [frozenByAdminId], references: [id])
  frozenByAdminId    String?
  finalFrozen        Boolean          @default(false)
  finalDeadline      DateTime?
  frozenAt           DateTime?
  User               User?            @relation(fields: [userId], references: [id])
  userId             String?
}
